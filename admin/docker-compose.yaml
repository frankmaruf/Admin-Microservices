version: "3.9"
services:
  frontend:
    networks:
      - app
    container_name: admin_frontend
    build:
      context: ./react-frontend
      dockerfile: Dockerfile
    environment:
      - CHOKIDAR_USEPOLLING=true
      # - WDS_SOCKET_PORT=0
    tty: true
    ports:
      - 7070:3000
    volumes:
      - ./react-frontend:/app/frontend
      # - "/react-frontend/node_modules"
    depends_on:
      - backend
  # backend:
  #   networks:
  #     - app
  #   container_name: admin_api
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   tty: true
  #   environment:
  #     DB_HOST: db
  #     DB_DATABASE: admin
  #     DB_USERNAME: root
  #     DB_PASSWORD: root
  #   ports:
  #     - 8000:8000
  #   volumes:
  #     - ./backend:/app/backend
  #   depends_on:
  #     - db
  influencer:
    networks:
      - app
    container_name: influencer_api
    build:
      context: ./influencer
      dockerfile: Dockerfile
    tty: true
    environment:
      DB_HOST: db
      DB_DATABASE: influencer
      DB_USERNAME: root
      DB_PASSWORD: root
      DB_PORT: 3306
      REDIS_HOST: redis
    ports:
      - 8070:8070
    volumes:
      - ./influencer:/app/influencer
    depends_on:
      - idb
      - redis
  
  db:
    networks:
      - app
    image: mysql:5.7.22
    restart: unless-stopped
    tty: true
    environment:
      MYSQL_DATABASE: influencer
      MYSQL_USER: root
      MYSQL_PASSWORD: root
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - .dbdata:/var/lib/mysql
    ports:
      - 33066:3306
  redis:
    networks:
      - app
    image: redis:7.0.0-alpine
    restart: unless-stopped
    tty: true
    # environment:
      # REDIS_PASSWORD: root
    ports:
      - 6379:6379
# MailHog
  mailhog_server:
    image: mailhog/mailhog
    container_name: cont_mailhog_server
    #this is optional
    tty: true
    ports:
      - '1025:1025'
      - '8025:8025'
    #restart: always
    restart: on-failure

    networks:
      - app
networks:
  app:
    external: true